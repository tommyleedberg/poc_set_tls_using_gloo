# This workflow prefixes most commands with sudo -u <username> -i to ensure that the commands are run under the correct user.
# Without this prefix any command will try to run under the root user (which is the user that the Self-Hosted runner works under).

name: Install GitHub Runner Dependencies

on:
  workflow_dispatch:
     inputs:
      userName:
        description: 'The username to create the tools under on the GitHub Runner vm'     
        default: 'etpAdmin'
        required: false
        
jobs:   
  updateSystem:
    name: Update and Upgrade apt
    runs-on: [dmz-runner]
    
    steps:
     - name: Update and Upgrade
       run: sudo apt update -y && sudo apt upgrade -y

  installHomebrew:
    name: Install Homebrew
    runs-on: [dmz-runner]
    needs: [updateSystem] 
    defaults:
      run:
        working-directory:  /home/${{ github.event.inputs.userName }}/
        
    steps:
      - name: Install Homebrew sliently
        run: sudo apt install linuxbrew-wrapper -y
        
      - name: Switch to etpAdmin user
        run: sudo -u ${{ github.event.inputs.userName }} -i
        
      - name: Run brew for the first time to create the .linuxbrew directory
        run:  brew -h
        
      - name: Test that linuxbrew exists and update the shell path with it
        run: test -d /home/${{ github.event.inputs.userName }}/.linuxbrew && eval $(/home/${{ github.event.inputs.userName }}/.linuxbrew/bin/brew shellenv)
             
      - name: Update etpAdmins profile 
        run: test -r /home/${{ github.event.inputs.userName }}/.profile && echo "eval $(/home/${{ github.event.inputs.userName }}/.linuxbrew/bin/brew shellenv)" >>/home/${{ github.event.inputs.userName }}/.profile
        
  installTools:
    name: Install tools
    runs-on: [dmz-runner]
    needs: [installHomebrew]
    defaults:
      run:
        working-directory:  /home/etpAdmin/    

    steps:   
      - name: Switch to etpAdmin user
        run: sudo -u ${{ github.event.inputs.userName }} -i
        
      - name: Install Azure cli
        run: brew install azure-cli
        continue-on-error: true

      - name: Install Node
        run: brew install node
        continue-on-error: true

      - name: Install Helm
        run: brew install helm
        continue-on-error: true

      - name: Install KubeCtl
        run: brew install kubectl
        continue-on-error: true

      - name: Install GlooCtl
        run: brew install glooctl
        continue-on-error: true

      - name: Install Go
        run: brew install go
        continue-on-error: true
        
  validateTools:
      name: Validate Tools are Installed
      runs-on: [dmz-runner]
      needs: [installTools]
      
      # This is a very basic way to validate. We should add some more logic here to validate tools are specific versions.
      steps:
      - name: Switch to etpAdmin user
        run: sudo -u ${{ github.event.inputs.userName }} -i
        
      - name: Validate Azure cli is installed
        run: az -v
        continue-on-error: true

      - name: Validate Node is installed
        run: node -v
        continue-on-error: true

      - name: Validate Helm is installed
        run: helm version
        continue-on-error: true

        # instead of doing a version check with kubectl do a help check to validate it's installed.
        # at this point kubectl isnt connected to a cluster so kubectl version returns an exit code of 1 which fails this step
      - name: Validate KubeCtl is installed
        run: kubectl --help
        continue-on-error: true

      - name: Validate GlooCtl is installed
        run: glooctl version
        continue-on-error: true

      - name: Validate Go is installed
        run: go version
        continue-on-error: true
